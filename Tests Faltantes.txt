Ataque de fuerza bruta:
	1. Mand√°s 5 veces un email inexistente ‚Üí a la 6ta devuelve HTTP 429.

	2. Mand√°s un email v√°lido ‚Üí responde 200 y nunca se bloquea.

	3. Mand√°s mails v√°lidos e inv√°lidos mezclados ‚Üí bloquea seg√∫n IP o usuario.




AuthIntegrationTest

	- Login: Ataque de fuerza bruta

AuthPasswordControllerSecurityTest

	- Olvide-password : Ataque de fuerza bruta

RegisterTest

	- Registro Usuario : Ataque de fuerza bruta

SesionControllerTest

	- 


***********FUTURO:

- usar @Valid en el Controller + anotaciones en el DTO, evitemos validar formatos o campos en el service, 
	dejar que los errores de validaci√≥n los capture Spring autom√°ticamente.

Qu√© deber√≠as dejar solo en el Service (validaciones de negocio):
Si el username o email ya est√°n en uso.

Si hay que bloquear un intento de registro por IP/email.

Si username.equals("forzar-error").

Si el rol no existe.

Si hay l√≥gica condicional que depende del contexto del sistema o de datos externos.

*********** FUTURO SEGURIDAD:

Login:

üîç Validaciones adicionales que podr√≠as agregar (opcional pero recomendadas)
Validaci√≥n o control							¬øNecesaria para login?								Notas
Verificar si el usuario existe antes de autenticar			‚ùå No es estrictamente necesario si UserDetailsService lo maneja bien		Opcional, pero puede ayudarte a loguear motivos de fallo
Rate limiting por IP / user-agent (nivel m√°s fino que isBlocked)	üî∏ Opcional									Especialmente √∫til si esper√°s mucho tr√°fico o ataques
Registro de intentos con ubicaci√≥n (geolocalizaci√≥n IP)			üî∏ Opcional									Puede sumar a la trazabilidad, pero no es imprescindible
Validar longitud m√°xima de campos en el DTO				‚úîÔ∏è Ya est√° cubierta con @Pattern o podr√≠as usar @Size				-
Logging detallado de intentos fallidos (sin revelar demasiado)		‚úîÔ∏è Lo hac√©s bien con los logs actuales						-
Captcha (si fuera login p√∫blico con frontend)				üî∏ Opcional									Muy √∫til contra bots si es una app abierta
