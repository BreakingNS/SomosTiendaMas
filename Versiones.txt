beta 0.0.1: autentificacion JWT, devuelve token
beta 0.0.2: autentificacion JWT, parte 1/4 finalizada

‚úÖ Login funcionando
‚úÖ Token v√°lido/inv√°lido manejado
‚úÖ Rutas p√∫blicas y protegidas bien diferenciadas

beta 0.0.3: asociaci√≥n de usuarios con roles y control por roles

Beta 0.0.3.5 - Autorizaci√≥n a nivel de m√©todo (verificaci√≥n manual en controller)

beta 0.0.4: modificacion de modelo de organizacion, cada tabla tiene su propia arquitectura multicapas

beta 0.0.5: tests exitosos sobre JWT basico.

beta 0.0.6: implementacion RSA Keys (SIN VARIABLES DE ENTORNO)

beta 0.0.6.1: implementacion parcial de refreshToken (PROBLEMAS DE ACCESO, POSIBLE FILTER)

beta 0.0.6.2: implementacion parcial de refreshToken (CREACION INFINITA DE TOKENS POR PARTE DE REFRESHTOCKEN)

beta 0.0.6.3: implementacion parcial de refreshToken (AGREGADO DE EXCEPCIONES Y USO/REVOCACION DE REFRESHTOKEN)

beta 0.0.6.4: implementacion parcial de refreshToken (USO/REVOCACION DE REFRESHTOKEN Y MULTIPLES SESIONES)

beta 0.0.6.5: implementacion parcial de refreshToken (GUARDADO DE IP Y USER_AGENT)

beta 0.0.7: implementacion final de refreshToken

beta 0.0.7.1: implementacion parcial de refreshToken avanzado (FALTA TABLA TOKEN EMITIDO)

beta 0.0.7.2: implementacion parcial de refreshToken avanzado (AGREGADO TOKEN EMITIDO)

beta 0.0.7.3: implementacion parcial de Multi-login con IP / User-Agent / Tokens por dispositivo (SE GUARDAN SESIONES DIFERENTES)

beta 0.0.7.4: implementacion parcial de Multi-login con IP / User-Agent / Tokens por dispositivo (TABLA SESIONACTIVA NO SE MODIFICA EN PRODUCCION)

beta 0.0.7.5: implementacion parcial de Multi-login con IP / User-Agent / Tokens por dispositivo (PROCESO DE ORDENAMIENTO Y LIMPIEZA DE CLASES)

beta 0.0.7.6: proceso de ordenamiento y limpieza (FALTA ARREGLAR REFRESHTOKEN)

beta 0.0.7.7: proceso de ordenamiento y limpieza (REFRESHTOKEN IMPLEMENTADO CORRECTAMENTE)

beta 0.0.7.8: proceso de ordenamiento y limpieza (FUNCIONAMIENTO HASTA TRAER SESIONES ACTIVAS ADMIN)

beta 0.0.7.9: proceso de ordenamiento y limpieza (FUNCIONES BASICAS, PRECIO A IMPLEMENTACIONES AVANZADAS)

beta 0.0.8.0: implementacion de funcion: olvide-password

beta 0.0.8.1: implementacion de funcion: reset-password

beta 0.0.8.2: implementacion final de funciones/endpoints se seguridad (COMIENZO DE LIMPIEZA Y ORDENAMIENTO)

beta 0.0.8.3: Ordenamiento y limpieza: JwtAuthenticationFilter completado.

beta 0.0.8.4: Ordenamiento y limpieza: registros User y Admin completado.

beta 0.0.8.5: Ordenamiento y limpieza: login completado.

beta 0.0.8.6: Ordenamiento y limpieza: refresh completado.

beta 0.0.8.7: Ordenamiento y limpieza: olvide-password y reset-password completado.

beta 0.0.8.8: Ordenamiento y limpieza: change-password completado.

beta 0.0.8.9: Ordenamiento y limpieza: logout completado.

beta 0.0.9.0: Ordenamiento y limpieza: mis sesiones activas completado.

beta 0.0.9.1: Ordenamiento y limpieza: sesiones activas ADMINS completado.

beta 0.0.9.2: Ordenamiento y limpieza: logout otras sesiones completado.

beta 0.0.9.3: Ordenamiento y limpieza: agregado de excepciones personalizadas (RUNTIMEEXCEPTION ELIMINADOS).

beta 0.0.9.4: Ordenamiento y limpieza: excepciones personalizadas centralizadas en GlobalExceptionHandler.

beta 0.0.9.5: Ordenamiento y limpieza: AuthService completado (PASSWORDRESETSERVICE AGREGADO).

beta 0.0.9.6: Ordenamiento y limpieza: RefreshTokenService completado.

beta 0.0.9.7: Ordenamiento y limpieza: SesionActivaService completado.

beta 0.0.9.8: Ordenamiento y limpieza: RokenEmitidoService y UserDetailsServiceImpl completados.

beta 0.0.9.9: Ordenamiento y limpieza: JwtTokenProvider y JwtAuthenticationFilter completados (RSAKEYSUTIL AGREGADO).

beta 0.1.0.0: Ordenamiento y limpieza: todos los DTOs completados.

beta 0.1.0.1: Ordenamiento y limpieza: todos los repository completados.

beta 0.1.0.2: Ordenamiento y limpieza: toda la limpiaza completada.

beta 0.1.0.3: Ordenamiento y limpieza: se separo endpoints de AuthController en otros controllers especificos.

beta 0.1.0.4: Pruebas y Tests: AdminInitializer agregado (JUNTO CON USER PARA REGISTRO AUTOMATICO).

beta 0.1.0.5: Pruebas y Tests: AccessDeniedHandler y AuthenticationEntryPoint agregados.

beta 0.1.0.6: Pruebas y Tests: Listo para comenzar la realizacion de los tests unitarios.

beta 0.1.1.0: Pruebas y Tests: Test Unitario realizado y finalizado - AuthIntegrationTest.

beta 0.1.2.0: Pruebas y Tests: Test Unitario realizado y finalizado - AuthPasswordControllerSecurityTest.

beta 0.1.3.0: Pruebas y Tests: Test Unitario realizado y finalizado - RegisterControllerTest.

beta 0.1.4.0: Pruebas y Tests: Test Unitario realizado y finalizado - SesionControllerTest.

beta 0.1.4.1: Seguridad y Endpoints en los Controllers: Protecci√≥n de los Endpoints de Recuperaci√≥n de Contrase√±a (FALTA TEST).
El endpoint /public/olvide-password y /public/reset-password deben tener medidas de seguridad adicionales para evitar abusos. 
Aunque son p√∫blicos, ser√≠a bueno agregar un l√≠mite de intentos para evitar ataques de fuerza bruta (por ejemplo, bloquear un 
email despu√©s de ciertos intentos fallidos o tener un l√≠mite de tiempo entre intentos).

beta 0.1.4.2: Seguridad y Endpoints en los Controllers: Logout de Sesiones Activas (FALTA TEST).
El endpoint /private/logout-otras-sesiones parece muy completo, pero podr√≠a ser √∫til a√±adir protecci√≥n contra la manipulaci√≥n 
de tokens por un usuario malintencionado. En lugar de permitir que el token se pase en el cuerpo de la solicitud (@RequestBody), 
podr√≠as hacer que sea parte de los encabezados, que generalmente es m√°s seguro.

beta 0.1.4.3: Seguridad y Endpoints en los Controllers: Seguridad en la Gesti√≥n de Tokens (FALTA TEST). 
Para los endpoints de refresh token, aseg√∫rate de que la renovaci√≥n de tokens no sea posible si el token est√° en una lista de 
revocaci√≥n o si el refresh token no est√° asociado a un usuario activo o v√°lido. Para esto, podr√≠as considerar mantener una lista 
de tokens revocados.

beta 0.1.4.3: Seguridad y Endpoints en los Controllers: Verificaci√≥n de Permisos Adicionales (FALTA TEST).
Ya est√°s usando @PreAuthorize para muchas rutas, lo cual es excelente. Sin embargo, en algunos casos, podr√≠as agregar m√°s 
validaciones de acceso a nivel de servicio (por ejemplo, validando si el usuario tiene acceso al recurso espec√≠fico con un 
hasPermission o similar). Aseg√∫rate de que el acceso a recursos privados est√© perfectamente controlado, m√°s all√° de roles 
generales como 'ROLE_ADMIN'.

beta 0.1.4.3.1: Seguridad y Endpoints en los Controllers: Verificaci√≥n de Permisos Adicionales - AuthController verificado.

beta 0.1.4.3.2: Seguridad y Endpoints en los Controllers: Verificaci√≥n de Permisos Adicionales - PasswordController verificado.

beta 0.1.4.3.3: Seguridad y Endpoints en los Controllers: Verificaci√≥n de Permisos Adicionales - RegistroController verificado.

beta 0.1.4.3.4: Seguridad y Endpoints en los Controllers: Verificaci√≥n de Permisos Adicionales - SesionController verificado.

	- beta 0.1.4.3.4.1: Verificaci√≥n de Permisos Adicionales - SesionController verificado - Endpoint private/activas verficado.

	- beta 0.1.4.3.4.2: Verificaci√≥n de Permisos Adicionales - SesionController verificado - Endpoint private/admin/activas verficado.

		- beta 0.1.4.3.4.3.1: SesionController verificado - Endpoint private/logout-otras-sesiones - Verificaci√≥n del accessToken y idUsuario.

		- beta 0.1.4.3.4.3.2: SesionController verificado - Endpoint private/logout-otras-sesiones - Verificaci√≥n en el servicio logoutTotalExceptoSesionActual.

beta 0.1.4.4: Seguridad y Endpoints en los Controllers: Listo, finalizado. Siguiente paso Tests de Seguridad






beta 0.1.4.5: Implementacion de la clase PublicRoutes (Rutas Publicas como clase compartida).

beta 0.1.4.6: Tests de Seguridad - Pruebas de L√≠mite de Intentos para Contrase√±a: Implementado en memoria.

beta 0.1.4.7: Tests de Seguridad - Pruebas de L√≠mite de Intentos para Contrase√±a: Persistido en Base de Datos (FALTA MEJORA).

beta 0.1.4.8: Implementacion de limite de acceso a endpoints por ataque de fuerza bruta 1 (FALTAN TESTS).
	/api/auth/public/login
	/api/password/public/olvide-password
	/api/registro/public/usuario

beta 0.1.4.9: Implementacion de Tests para errores de Base de Datos.

beta 0.1.5.0: Se ordenaron DTOs en paquetes correspondientes.

beta 0.1.5.1: Se agregaron validaciones correspondientes a DTO requests de endpoints en AuthController.

beta 0.1.5.2: Se agregaron validaciones correspondientes a DTO requests de endpoints en PasswordController.

beta 0.1.5.3: Se agregaron validaciones correspondientes a DTO requests de endpoints en RegistroController.

beta 0.1.5.4: Orgenizacion de Tests en paquetes y endpoints temporales de pruebas.

***Server beta 0.0.1: nuevas credenciales rsa y cambio de directorios en application.properties.

üîπ Diferencia entre Entidad y DTO

Entidad (@Entity)							DTO (Data Transfer Object)
Representa una tabla en la base de datos.				Representa los datos que vas a enviar o recibir desde el cliente (API).
Contiene anotaciones JPA como @Id, @ManyToOne, etc.			No tiene l√≥gica de persistencia. Solo tiene los datos necesarios para una operaci√≥n espec√≠fica.
Se usa para interactuar con la base de datos a trav√©s del Repository.	Se usa para exponer solo los datos necesarios a trav√©s del Controller (sin exponer toda la entidad).
Puede tener relaciones complicadas, colecciones, etc.			Est√° dise√±ado para ser simple, espec√≠fico y liviano.

-> 1. Autenticaci√≥n JWT

beta 0.1.6.0: Generar token JWT con datos usuales (subject, iat, exp = 15 min, claims).

beta 0.1.6.1: Generar refresh token (exp = 7 d√≠as).

***Server beta 0.1.6.2: Beta para pruebas de login

***Server beta 0.1.6.2: configuraci√≥n inicial de HTTPS con certificado autofirmado en Spring Boot

***Server beta 0.1.6.2: autenticaci√≥n JWT usando cookies HttpOnly en login, refresh, logout y filtros

- Modificados endpoints de login, refresh y logout para usar cookies HttpOnly
- JwtAuthenticationFilter ahora lee tokens desde cookies en lugar de headers
- Implementada clase CookieUtils para manejo centralizado de cookies
- Configuradas cookies con atributos secure, httpOnly y sameSite

*-*-*-*-*-*-*-*    MOMENTANEAMENTE COOKIES NO IMPLEMENTADAS 	*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*   	    FUTURA IMPLEMENTACION		*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*   INICIO DE IMPLEMENTACION DE FUNCIONALIDADES 	*-*-*-*-*-*-*-*

beta 0.1.6.3: Funcional con HTTPS y Cookies.
